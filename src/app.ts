import express, { NextFunction, Request, Response } from "express";
import * as mongoose from "mongoose";

import { configs } from "./configs";
import { ApiError } from "./errors";
import { User } from "./models";
import { IUser } from "./types";
import { UserValidator } from "./validators";

const app = express();

app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// app.use(express.json()) - –¶–µ–π –∫–æ–¥ –¥–æ–∑–≤–æ–ª—è—î Express.js —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞—Ç–∏ —Ç–∞ –æ–±—Ä–æ–±–ª—è—Ç–∏ –¥–∞–Ω—ñ,—â–æ –Ω–∞–¥—Ö–æ–¥—è—Ç—å —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON.
// –í—ñ–Ω –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î middleware, —è–∫–∏–π –∞–Ω–∞–ª—ñ–∑—É—î —Ç—ñ–ª–æ –∑–∞–ø–∏—Ç—É —Ç–∞ –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î –π–æ–≥–æ –∑ JSON —É JavaScript –æ–±'—î–∫—Ç.
// –¶–µ –¥–æ–∑–≤–æ–ª—è—î –≤–∞–º –∑—Ä—É—á–Ω–æ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ –¥–∞–Ω–∏—Ö, —è–∫—ñ –Ω–∞–¥—Å–∏–ª–∞—é—Ç—å—Å—è —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON —É –≤–∞—à–æ–º—É —Å–µ—Ä–≤–µ—Ä–Ω–æ–º—É –¥–æ–¥–∞—Ç–∫—É.
//
// app.use(express.urlencoded({ extended: true })) - –¶–µ–π –∫–æ–¥ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î middleware –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö, —â–æ –Ω–∞–¥—Ö–æ–¥—è—Ç—å
// —É —Ñ–æ—Ä–º–∞—Ç—ñ URL-–∫–æ–¥—É–≤–∞–Ω–Ω—è (application/x-www-form-urlencoded). –í—ñ–Ω –∞–Ω–∞–ª—ñ–∑—É—î –¥–∞–Ω—ñ –∑ –∑–∞–ø–∏—Ç—É, —è–∫—ñ –ø–µ—Ä–µ–¥–∞—é—Ç—å—Å—è —É —Ñ–æ—Ä–º—ñ
// POST –∞–±–æ –∑–∞–ø–∏—Ç—ñ GET –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ URL, —Ç–∞ —Ä–æ–∑—à–∏—Ñ—Ä–æ–≤—É—î —ó—Ö —É JavaScript –æ–±'—î–∫—Ç. –ü–∞—Ä–∞–º–µ—Ç—Ä extended: true –¥–æ–∑–≤–æ–ª—è—î
// –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –±—ñ–ª—å—à —Å–∫–ª–∞–¥–Ω—ñ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–∞–Ω–∏—Ö, —Ç–∞–∫—ñ —è–∫ –º–∞—Å–∏–≤–∏ –∞–±–æ –æ–±'—î–∫—Ç–∏, —É URL-–∫–æ–¥–æ–≤–∞–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ.
//
// CRUD - create, read, update, delete

app.get(
  "/users",
  async (req: Request, res: Response): Promise<Response<IUser[]>> => {
    try {
      const users = await User.find().select("-password");

      return res.json(users);
    } catch (e) {
      console.log(e);
    }
  }
);

app.post(
  "/users",
  async (
    req: Request,
    res: Response,
    next: NextFunction
  ): Promise<Response<IUser>> => {
    try {
      const { error, value } = UserValidator.create.validate(req.body);
      if (error) {
        throw new ApiError(error.message, 400);
      }
      const createdUser = await User.create(value);

      return res.status(201).json(createdUser);
    } catch (e) {
      next(e);
    }
  }
);

app.get(
  "/users/:id",
  async (req: Request, res: Response): Promise<Response<IUser>> => {
    try {
      const user = await User.findById(req.params.id);

      return res.json(user);
    } catch (e) {
      console.log(e);
    }
  }
);

app.put(
  "/users/:id",
  async (
    req: Request,
    res: Response,
    next: NextFunction
  ): Promise<Response<IUser>> => {
    try {
      const { id } = req.params;
      const { error, value } = UserValidator.update.validate(req.body);
      if (error) {
        throw new ApiError(error.message, 400);
      }
      const updatedUser = await User.findOneAndUpdate(
        { _id: id },
        { ...value },
        { returnDocument: "after" } //—Å–ø–æ—á–∞—Ç–∫—É update, –ø–æ—Ç—ñ–º –≤–∏–≤–æ–¥–∏—Ç—å—Å—è —é–∑–µ—Ä
      );

      return res.status(200).json(updatedUser);
    } catch (e) {
      next(e);
    }
  }
);

app.delete(
  "/users/:id",
  async (req: Request, res: Response): Promise<Response<void>> => {
    try {
      const { id } = req.params;
      await User.deleteOne({ _id: id });

      return res.sendStatus(200);
    } catch (e) {
      console.log(e);
    }
  }
);

app.use((error: any, req: Request, res: Response, next: NextFunction) => {
  const status = error.status || 500;

  return res.status(status).json(error.message);
});

app.listen(configs.PORT, () => {
  mongoose.connect(configs.DB_URL);
  console.log(`Server has started on PORT ${configs.PORT} ü•∏`);
});
